{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "cap = cv2.VideoCapture('/dev/video0')\n",
    "height, width = 720, 1280\n",
    "cap.set(cv2.CAP_PROP_FRAME_WIDTH ,width)\n",
    "cap.set(cv2.CAP_PROP_FRAME_HEIGHT,height)\n",
    "cap.set(cv2.CAP_PROP_FPS, 60)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_mask(frame, bodypix_url='http://localhost:9000'):\n",
    "    _, data = cv2.imencode(\".jpg\", frame)\n",
    "    r = requests.post(\n",
    "        url=bodypix_url,\n",
    "        data=data.tobytes(),\n",
    "        headers={'Content-Type': 'application/octet-stream'})\n",
    "    # convert raw bytes to a numpy array\n",
    "    # raw data is uint8[width * height] with value 0 or 1\n",
    "    mask = np.frombuffer(r.content, dtype=np.uint8)\n",
    "    mask = mask.reshape((frame.shape[0], frame.shape[1]))\n",
    "    return mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "while True:\n",
    "    success, frame = cap.read()\n",
    "    cv2.imshow('frame', get_mask(frame))\n",
    "    if cv2.waitKey(1) == ord('q'):\n",
    "        break\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
